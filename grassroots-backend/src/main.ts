import { NestFactory } from "@nestjs/core";
import { AppModule } from "./app.module";
import { DocumentBuilder, SwaggerModule } from "@nestjs/swagger";
import { readFile, writeFile } from "fs/promises";
import crypto from "crypto";
import os from "os";
import openapiTS, { astToString } from "openapi-typescript";

// Auto generated by the Nest OpenAPI Plugin.
import metadata from "./metadata";
import path from "path";

const openAPISchemaPath = "./openAPI.json";
const openAPITSSchemaPath = "./src/grassroots-shared/openAPI.gen.ts";

async function bootstrap(): Promise<void> {
  const app = await NestFactory.create(AppModule);
  await app.listen(process.env.PORT ?? 3000);

  const config = new DocumentBuilder()
    .setTitle("Grassroots")
    .setDescription("The Grassroots API description")
    .setVersion("0.0")
    .build();

  await SwaggerModule.loadPluginMetadata(metadata);
  const openAPI = SwaggerModule.createDocument(app, config, {
    autoTagControllers: true,
  });
  const openAPIStr = JSON.stringify(openAPI, null, 2);
  const openAPIHash = crypto
    .createHash("sha1")
    .update(openAPIStr)
    .digest("base64");

  const openAPIHashPath = path.join(os.tmpdir(), "nestOpenAPIHash");
  const lastHash = await readFile(openAPIHashPath, "utf8")
    .then((s) => {
      return s;
    })
    .catch(() => null);

  // The OpenAPI Spec has changed, due some post processing.
  if (openAPIHash != lastHash) {
    await writeFile(openAPIHashPath, openAPIHash);
    await writeFile(openAPISchemaPath, openAPIStr);
    console.log("Updating OpenAPI Schema TS bindings");
    const ast = await openapiTS(openAPIStr);
    const contents = astToString(ast);
    await writeFile(openAPITSSchemaPath, contents);
    console.log("Done updating OpenAPI Schema TS bindings");
  } else {
    console.log("Skip updating OpenAPI");
  }
}
<<<<<<< HEAD
// eslint-disable-next-line @typescript-eslint/no-floating-promises
bootstrap();
=======
void bootstrap();
>>>>>>> 57bb45d (Generate Typescript bindings.)
