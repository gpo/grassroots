import { NestFactory } from "@nestjs/core";
import { AppModule, listenAndConfigureApp } from "./App.module";
import { DocumentBuilder, SwaggerModule } from "@nestjs/swagger";
import { readFile } from "fs/promises";
import openapiTS, { astToString } from "openapi-typescript";

// Auto generated by the Nest OpenAPI Plugin.
import metadata from "./metadata";
import { NestExpressApplication } from "@nestjs/platform-express";
import {
  addValidationErrorsToOpenAPI,
  throwOnInvalidType,
} from "./PostProcessOpenAPI";
import { ValidationErrorOutDTO } from "./contacts/entities/ValidationError.dto";
import { graphDependencies } from "./util/GraphDependencies";
import { writeFormatted } from "./util/FormattingWriter";

const openAPISchemaPath = "./openAPI.json";
const openAPITSSchemaPath = "./src/grassroots-shared/OpenAPI.gen.ts";

async function bootstrap(port: number): Promise<void> {
  const app = await NestFactory.create<NestExpressApplication>(AppModule);
  await listenAndConfigureApp(app, port);

  console.time("generate files");
  const config = new DocumentBuilder()
    .setTitle("Grassroots")
    .setDescription("The Grassroots API description")
    .setVersion("0.0")
    .build();

  await SwaggerModule.loadPluginMetadata(metadata);
  const openAPI = SwaggerModule.createDocument(app, config, {
    autoTagControllers: true,
    extraModels: [ValidationErrorOutDTO],
  });

  throwOnInvalidType(openAPI);
  addValidationErrorsToOpenAPI(openAPI);

  const openAPIStr = JSON.stringify(openAPI, null, 2);

  // The OpenAPI Spec has changed, do some post processing.
  const openAPISpecWrite = await writeFormatted({
    filePath: openAPISchemaPath,
    text: openAPIStr,
    onlyIfChanged: true,
  });
  if (openAPISpecWrite.noChange) {
    console.log("Skip updating OpenAPI");
  } else {
    console.log("Updating OpenAPI Schema TS bindings");
    const ast = await openapiTS(openAPIStr);
    const contents = astToString(ast);
    await writeFormatted({
      filePath: openAPITSSchemaPath,
      text: contents,
    });
    console.log("Done updating OpenAPI Schema TS bindings");
  }

  await writeFormatted({
    filePath: "../docs/DependencyGraph.md",
    text: graphDependencies(app),
  });

  const metadataPath = "./src/metadata.ts";
  const formattedMetadataPath = "./src/FormattedMetadata.ts";
  const metadataTs = await readFile(metadataPath, "utf8");
  await writeFormatted({
    filePath: formattedMetadataPath,
    text: metadataTs,
  });
  console.timeEnd("generate files");

  if (process.argv.includes("--gen-files-only")) {
    await app.close();
  }
}

const port = process.env.PORT !== undefined ? parseInt(process.env.PORT) : 3000;
void bootstrap(port);
