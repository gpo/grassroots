From f147e405e5b34521efc959268cefc680dcc49d21 Mon Sep 17 00:00:00 2001
From: Tim Dresser <tdresser@gmail.com>
Date: Wed, 1 Oct 2025 16:24:09 +0000
Subject: [PATCH] Needs rebase

---
 .env.development                              |   2 +-
 .../src/auth/Auth.controller.ts               |   4 +-
 .../src/auth/GoogleOAuth.strategy.ts          |   1 +
 .../phone-canvass/PhoneCanvass.controller.ts  |  16 +-
 grassroots-frontend/src/GrassRootsAPI.ts      |   4 +-
 .../src/components/GRFileInput.tsx            |  46 +++
 .../src/context/LoginStateContext.ts          |   2 -
 grassroots-frontend/src/routeTree.gen.ts      |  43 +--
 .../src/routes/CreatePhoneCanvass.tsx         |  10 -
 .../PhoneCanvass/CreatePhoneCanvass.tsx       | 122 ++++++++
 grassroots-frontend/src/routes/__root.tsx     |   2 +-
 .../src/util/ReadFileAsText.ts                |  19 ++
 grassroots-frontend/src/vite-env.d.ts         |   1 +
 grassroots-shared/src/dtos/Contact.dto.ts     |   4 +
 grassroots-shared/src/metadata.ts             | 290 ------------------
 15 files changed, 232 insertions(+), 334 deletions(-)
 create mode 100644 grassroots-frontend/src/components/GRFileInput.tsx
 delete mode 100644 grassroots-frontend/src/routes/CreatePhoneCanvass.tsx
 create mode 100644 grassroots-frontend/src/routes/PhoneCanvass/CreatePhoneCanvass.tsx
 create mode 100644 grassroots-frontend/src/util/ReadFileAsText.ts
 delete mode 100644 grassroots-shared/src/metadata.ts

diff --git a/.env.development b/.env.development
index 4bc3b72..2059c5a 100644
--- a/.env.development
+++ b/.env.development
@@ -4,5 +4,5 @@ POSTGRES_HOST = db
 POSTGRES_DATABASE = grassroots
 POSTGRES_PORT = 5432
 VITE_BACKEND_HOST = https://grassroots.org/api
-FRONTEND_HOST = https://grassroots.org
+VITE_FRONTEND_HOST = https://grassroots.org
 GOOGLE_AUTH_CALLBACK_URL = http://grassroots.org/api/auth/google/callback
diff --git a/grassroots-backend/src/auth/Auth.controller.ts b/grassroots-backend/src/auth/Auth.controller.ts
index 4ea1323..10ffdf0 100644
--- a/grassroots-backend/src/auth/Auth.controller.ts
+++ b/grassroots-backend/src/auth/Auth.controller.ts
@@ -50,9 +50,9 @@ export class AuthController {
     @Request() req: GrassrootsRequest,
     @Response() response: ExpressResponse,
   ): VoidDTO {
-    const host = this.configService.get<string>("FRONTEND_HOST");
+    const host = this.configService.get<string>("VITE_FRONTEND_HOST");
     if (host === undefined) {
-      throw new Error("Missing env variable for FRONTEND_HOST");
+      throw new Error("Missing env variable for VITE_FRONTEND_HOST");
     }
     if (!req.user) {
       throw new Error("No user found for login.");
diff --git a/grassroots-backend/src/auth/GoogleOAuth.strategy.ts b/grassroots-backend/src/auth/GoogleOAuth.strategy.ts
index bfb06fd..eedc64b 100644
--- a/grassroots-backend/src/auth/GoogleOAuth.strategy.ts
+++ b/grassroots-backend/src/auth/GoogleOAuth.strategy.ts
@@ -39,6 +39,7 @@ export class GoogleOAuthStrategy extends PassportStrategy(
       clientSecret,
       callbackURL,
       scope: ["email", "profile"],
+      prompt: "login",
     } satisfies Partial<OpenIDConnectStrategy.StrategyOptions>);
   }
 
diff --git a/grassroots-backend/src/phone-canvass/PhoneCanvass.controller.ts b/grassroots-backend/src/phone-canvass/PhoneCanvass.controller.ts
index 0b0f68f..463edfa 100644
--- a/grassroots-backend/src/phone-canvass/PhoneCanvass.controller.ts
+++ b/grassroots-backend/src/phone-canvass/PhoneCanvass.controller.ts
@@ -44,13 +44,15 @@ export class PhoneCanvassController {
     @Body() canvasData: CreatePhoneCanvasCSVRequestDTO,
     @Request() req: GrassrootsRequest,
   ): Promise<CreatePhoneCanvassResponseDTO> {
+    console.log(canvasData.csv);
     const email = getEmail(req);
     const rows = Papa.parse<{
       metadata: string;
       email: string;
-      firstName: string;
-      lastName: string;
-      phoneNumber: string;
+      first_name: string;
+      middle_name: string;
+      last_name: string;
+      phone: string;
     }>(canvasData.csv, {
       header: true,
       dynamicTyping: false,
@@ -58,6 +60,7 @@ export class PhoneCanvassController {
       transformHeader: (h) => h.trim(),
       transform: (v) => v.trim(),
     });
+    console.log(rows);
 
     // TODO: validate data.
     const createDTO = CreatePhoneCanvassRequestDTO.from({
@@ -66,9 +69,10 @@ export class PhoneCanvassController {
         CreatePhoneCanvasContactRequestDTO.from({
           contact: CreateContactRequestDTO.from({
             email: contactRow.email,
-            firstName: contactRow.firstName,
-            lastName: contactRow.lastName,
-            phoneNumber: contactRow.phoneNumber,
+            firstName: contactRow.first_name,
+            middleName: contactRow.middle_name,
+            lastName: contactRow.last_name,
+            phoneNumber: contactRow.phone,
             organizationId: ROOT_ORGANIZATION_ID,
           }),
           metadata: contactRow.metadata,
diff --git a/grassroots-frontend/src/GrassRootsAPI.ts b/grassroots-frontend/src/GrassRootsAPI.ts
index a9a0cb9..525a6ac 100644
--- a/grassroots-frontend/src/GrassRootsAPI.ts
+++ b/grassroots-frontend/src/GrassRootsAPI.ts
@@ -40,10 +40,12 @@ export function navigateToBackendRoute<
     path = "api" + path + "?" + new URLSearchParams(query).toString();
   }
 
+  const absolute_path = new URL(path, import.meta.env.VITE_FRONTEND_HOST).href;
+
   // Use a tanstack router redirect to avoid races.
   // eslint-disable-next-line @typescript-eslint/only-throw-error
   throw redirect({
-    href: path,
+    href: absolute_path,
     reloadDocument: true,
   });
 }
diff --git a/grassroots-frontend/src/components/GRFileInput.tsx b/grassroots-frontend/src/components/GRFileInput.tsx
new file mode 100644
index 0000000..b8c4880
--- /dev/null
+++ b/grassroots-frontend/src/components/GRFileInput.tsx
@@ -0,0 +1,46 @@
+import { FileInput } from "@mantine/core";
+import { JSX } from "react";
+import {
+  FieldPath,
+  FieldValues,
+  Path,
+  useController,
+  FieldPathValue,
+} from "react-hook-form";
+
+export interface GRFileInputProps<T extends FieldValues> {
+  label: string;
+  description: string;
+  placeholder: string;
+  name: Path<T>;
+  accept: string;
+  defaultValue?: FieldPathValue<T, FieldPath<T>>;
+}
+
+export function GRFileInput<T extends FieldValues>(
+  props: GRFileInputProps<T>,
+): JSX.Element {
+  const {
+    field: { value, onChange, ...field },
+    fieldState,
+  } = useController<T>({
+    name: props.name,
+    defaultValue: props.defaultValue,
+  });
+
+  return (
+    <FileInput
+      value={value}
+      onChange={(v) => {
+        onChange(v);
+      }}
+      label={props.label}
+      description={props.description}
+      placeholder={props.placeholder}
+      error={fieldState.error?.message}
+      accept={props.accept}
+      clearable
+      {...field}
+    ></FileInput>
+  );
+}
diff --git a/grassroots-frontend/src/context/LoginStateContext.ts b/grassroots-frontend/src/context/LoginStateContext.ts
index f46a871..fbb4c97 100644
--- a/grassroots-frontend/src/context/LoginStateContext.ts
+++ b/grassroots-frontend/src/context/LoginStateContext.ts
@@ -2,8 +2,6 @@ import { createContext } from "react";
 import { grassrootsAPI } from "../GrassRootsAPI.js";
 import { UserDTO } from "grassroots-shared/dtos/User.dto";
 
-export const LOGIN_URL = "http://grassroots.org/api/auth/login";
-
 export interface LoginState {
   user: UserDTO;
   logout: () => Promise<void>;
diff --git a/grassroots-frontend/src/routeTree.gen.ts b/grassroots-frontend/src/routeTree.gen.ts
index 07e83a1..f64fbc4 100644
--- a/grassroots-frontend/src/routeTree.gen.ts
+++ b/grassroots-frontend/src/routeTree.gen.ts
@@ -13,9 +13,9 @@ import { Route as UsersRouteImport } from './routes/Users'
 import { Route as SharedSearchRouteImport } from './routes/SharedSearch'
 import { Route as SearchRouteImport } from './routes/Search'
 import { Route as MeRouteImport } from './routes/Me'
-import { Route as CreatePhoneCanvassRouteImport } from './routes/CreatePhoneCanvass'
 import { Route as CreateContactRouteImport } from './routes/CreateContact'
 import { Route as IndexRouteImport } from './routes/index'
+import { Route as PhoneCanvassCreatePhoneCanvassRouteImport } from './routes/PhoneCanvass/CreatePhoneCanvass'
 import { Route as OrganizationsOrganizationIdRouteImport } from './routes/Organizations/$organizationId'
 
 const UsersRoute = UsersRouteImport.update({
@@ -38,11 +38,6 @@ const MeRoute = MeRouteImport.update({
   path: '/Me',
   getParentRoute: () => rootRouteImport,
 } as any)
-const CreatePhoneCanvassRoute = CreatePhoneCanvassRouteImport.update({
-  id: '/CreatePhoneCanvass',
-  path: '/CreatePhoneCanvass',
-  getParentRoute: () => rootRouteImport,
-} as any)
 const CreateContactRoute = CreateContactRouteImport.update({
   id: '/CreateContact',
   path: '/CreateContact',
@@ -53,6 +48,12 @@ const IndexRoute = IndexRouteImport.update({
   path: '/',
   getParentRoute: () => rootRouteImport,
 } as any)
+const PhoneCanvassCreatePhoneCanvassRoute =
+  PhoneCanvassCreatePhoneCanvassRouteImport.update({
+    id: '/PhoneCanvass/CreatePhoneCanvass',
+    path: '/PhoneCanvass/CreatePhoneCanvass',
+    getParentRoute: () => rootRouteImport,
+  } as any)
 const OrganizationsOrganizationIdRoute =
   OrganizationsOrganizationIdRouteImport.update({
     id: '/Organizations/$organizationId',
@@ -63,76 +64,76 @@ const OrganizationsOrganizationIdRoute =
 export interface FileRoutesByFullPath {
   '/': typeof IndexRoute
   '/CreateContact': typeof CreateContactRoute
-  '/CreatePhoneCanvass': typeof CreatePhoneCanvassRoute
   '/Me': typeof MeRoute
   '/Search': typeof SearchRoute
   '/SharedSearch': typeof SharedSearchRoute
   '/Users': typeof UsersRoute
   '/Organizations/$organizationId': typeof OrganizationsOrganizationIdRoute
+  '/PhoneCanvass/CreatePhoneCanvass': typeof PhoneCanvassCreatePhoneCanvassRoute
 }
 export interface FileRoutesByTo {
   '/': typeof IndexRoute
   '/CreateContact': typeof CreateContactRoute
-  '/CreatePhoneCanvass': typeof CreatePhoneCanvassRoute
   '/Me': typeof MeRoute
   '/Search': typeof SearchRoute
   '/SharedSearch': typeof SharedSearchRoute
   '/Users': typeof UsersRoute
   '/Organizations/$organizationId': typeof OrganizationsOrganizationIdRoute
+  '/PhoneCanvass/CreatePhoneCanvass': typeof PhoneCanvassCreatePhoneCanvassRoute
 }
 export interface FileRoutesById {
   __root__: typeof rootRouteImport
   '/': typeof IndexRoute
   '/CreateContact': typeof CreateContactRoute
-  '/CreatePhoneCanvass': typeof CreatePhoneCanvassRoute
   '/Me': typeof MeRoute
   '/Search': typeof SearchRoute
   '/SharedSearch': typeof SharedSearchRoute
   '/Users': typeof UsersRoute
   '/Organizations/$organizationId': typeof OrganizationsOrganizationIdRoute
+  '/PhoneCanvass/CreatePhoneCanvass': typeof PhoneCanvassCreatePhoneCanvassRoute
 }
 export interface FileRouteTypes {
   fileRoutesByFullPath: FileRoutesByFullPath
   fullPaths:
     | '/'
     | '/CreateContact'
-    | '/CreatePhoneCanvass'
     | '/Me'
     | '/Search'
     | '/SharedSearch'
     | '/Users'
     | '/Organizations/$organizationId'
+    | '/PhoneCanvass/CreatePhoneCanvass'
   fileRoutesByTo: FileRoutesByTo
   to:
     | '/'
     | '/CreateContact'
-    | '/CreatePhoneCanvass'
     | '/Me'
     | '/Search'
     | '/SharedSearch'
     | '/Users'
     | '/Organizations/$organizationId'
+    | '/PhoneCanvass/CreatePhoneCanvass'
   id:
     | '__root__'
     | '/'
     | '/CreateContact'
-    | '/CreatePhoneCanvass'
     | '/Me'
     | '/Search'
     | '/SharedSearch'
     | '/Users'
     | '/Organizations/$organizationId'
+    | '/PhoneCanvass/CreatePhoneCanvass'
   fileRoutesById: FileRoutesById
 }
 export interface RootRouteChildren {
   IndexRoute: typeof IndexRoute
   CreateContactRoute: typeof CreateContactRoute
-  CreatePhoneCanvassRoute: typeof CreatePhoneCanvassRoute
   MeRoute: typeof MeRoute
   SearchRoute: typeof SearchRoute
   SharedSearchRoute: typeof SharedSearchRoute
   UsersRoute: typeof UsersRoute
   OrganizationsOrganizationIdRoute: typeof OrganizationsOrganizationIdRoute
+  PhoneCanvassCreatePhoneCanvassRoute: typeof PhoneCanvassCreatePhoneCanvassRoute
 }
 
 declare module '@tanstack/react-router' {
@@ -165,13 +166,6 @@ declare module '@tanstack/react-router' {
       preLoaderRoute: typeof MeRouteImport
       parentRoute: typeof rootRouteImport
     }
-    '/CreatePhoneCanvass': {
-      id: '/CreatePhoneCanvass'
-      path: '/CreatePhoneCanvass'
-      fullPath: '/CreatePhoneCanvass'
-      preLoaderRoute: typeof CreatePhoneCanvassRouteImport
-      parentRoute: typeof rootRouteImport
-    }
     '/CreateContact': {
       id: '/CreateContact'
       path: '/CreateContact'
@@ -186,6 +180,13 @@ declare module '@tanstack/react-router' {
       preLoaderRoute: typeof IndexRouteImport
       parentRoute: typeof rootRouteImport
     }
+    '/PhoneCanvass/CreatePhoneCanvass': {
+      id: '/PhoneCanvass/CreatePhoneCanvass'
+      path: '/PhoneCanvass/CreatePhoneCanvass'
+      fullPath: '/PhoneCanvass/CreatePhoneCanvass'
+      preLoaderRoute: typeof PhoneCanvassCreatePhoneCanvassRouteImport
+      parentRoute: typeof rootRouteImport
+    }
     '/Organizations/$organizationId': {
       id: '/Organizations/$organizationId'
       path: '/Organizations/$organizationId'
@@ -199,12 +200,12 @@ declare module '@tanstack/react-router' {
 const rootRouteChildren: RootRouteChildren = {
   IndexRoute: IndexRoute,
   CreateContactRoute: CreateContactRoute,
-  CreatePhoneCanvassRoute: CreatePhoneCanvassRoute,
   MeRoute: MeRoute,
   SearchRoute: SearchRoute,
   SharedSearchRoute: SharedSearchRoute,
   UsersRoute: UsersRoute,
   OrganizationsOrganizationIdRoute: OrganizationsOrganizationIdRoute,
+  PhoneCanvassCreatePhoneCanvassRoute: PhoneCanvassCreatePhoneCanvassRoute,
 }
 export const routeTree = rootRouteImport
   ._addFileChildren(rootRouteChildren)
diff --git a/grassroots-frontend/src/routes/CreatePhoneCanvass.tsx b/grassroots-frontend/src/routes/CreatePhoneCanvass.tsx
deleted file mode 100644
index cdf462e..0000000
--- a/grassroots-frontend/src/routes/CreatePhoneCanvass.tsx
+++ /dev/null
@@ -1,10 +0,0 @@
-import { createFileRoute } from "@tanstack/react-router";
-import { JSX } from "react";
-
-export const Route = createFileRoute("/CreatePhoneCanvass")({
-  component: CreatePhoneCanvass,
-});
-
-function CreatePhoneCanvass(): JSX.Element {
-  return <h1>TODO</h1>;
-}
diff --git a/grassroots-frontend/src/routes/PhoneCanvass/CreatePhoneCanvass.tsx b/grassroots-frontend/src/routes/PhoneCanvass/CreatePhoneCanvass.tsx
new file mode 100644
index 0000000..6fa3fb2
--- /dev/null
+++ b/grassroots-frontend/src/routes/PhoneCanvass/CreatePhoneCanvass.tsx
@@ -0,0 +1,122 @@
+import { createFileRoute } from "@tanstack/react-router";
+import { JSX, useCallback } from "react";
+import { useMutation, useQueryClient } from "@tanstack/react-query";
+import {
+  FieldValues,
+  FormProvider,
+  ResolverOptions,
+  ResolverResult,
+  SubmitHandler,
+  useForm,
+} from "react-hook-form";
+import { grassrootsAPI } from "../../GrassRootsAPI.js";
+import { classValidatorResolver } from "@hookform/resolvers/class-validator";
+import { TextField } from "../../components/TextField.js";
+import { IsNotEmpty } from "class-validator";
+import { readFileAsText } from "../../util/ReadFileAsText.js";
+import { GRFileInput } from "../../components/GRFileInput.js";
+import { propsOf } from "grassroots-shared/util/TypeUtils";
+
+export const Route = createFileRoute("/PhoneCanvass/CreatePhoneCanvass")({
+  component: CreatePhoneCanvass,
+});
+
+class CreatePhoneCanvassDataValidated {
+  @IsNotEmpty()
+  name!: string;
+}
+
+class CreatePhoneCanvassData extends CreatePhoneCanvassDataValidated {
+  csv!: File;
+}
+
+function isValid<T extends FieldValues>(
+  result: ResolverResult<T>,
+  // eslint-disable-next-line @typescript-eslint/no-empty-object-type
+): result is { values: T; errors: {} } {
+  return Object.keys(result.errors).length === 0;
+}
+
+function CreatePhoneCanvass(): JSX.Element {
+  const form = useForm<CreatePhoneCanvassData>({
+    resolver: async (data, context, options) => {
+      // If we pass classValidatorResolver a File, it explodes.
+      // To avoid this, we pull out the files before validation.
+      const { csv: csvProps, ...validated } = propsOf(data);
+      void csvProps;
+      const csv = data.csv;
+      console.log(csv);
+      const validatedResult = await classValidatorResolver(
+        CreatePhoneCanvassDataValidated,
+      )(
+        validated,
+        context,
+        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
+        options as unknown as ResolverOptions<CreatePhoneCanvassDataValidated>,
+      );
+
+      const result: ResolverResult<CreatePhoneCanvassData> = validatedResult;
+      if (isValid(result)) {
+        result.values.csv = csv;
+      }
+      // TODO: handle invalid files.
+      return result;
+    },
+    mode: "onBlur",
+  });
+
+  const queryClient = useQueryClient();
+  const { mutateAsync } = useMutation({
+    mutationFn: async (phoneCanvass: CreatePhoneCanvassData) => {
+      console.log(phoneCanvass.csv);
+      const csvText = await readFileAsText(phoneCanvass.csv);
+
+      const result = await grassrootsAPI.POST("/phone-canvass", {
+        body: {
+          csv: csvText,
+          name: phoneCanvass.name,
+        },
+      });
+      if (!result.data) {
+        throw new Error("Failed to create phone canvass.");
+      }
+      console.log(result.data);
+      return result.data;
+    },
+    retry: 1,
+    onSuccess: async () => {
+      await queryClient.invalidateQueries({ queryKey: ["contacts"] });
+    },
+  });
+
+  const onSubmit: SubmitHandler<CreatePhoneCanvassData> = useCallback(
+    async (data) => {
+      console.log("SUBMIT!", data);
+
+      await mutateAsync(data);
+      form.reset();
+    },
+    [],
+  );
+
+  return (
+    <FormProvider {...form}>
+      {/* This little typescript dance is required to make eslint happy.  */}
+      <form onSubmit={(...args) => void form.handleSubmit(onSubmit)(...args)}>
+        <TextField<{ name: string }>
+          defaultValue=""
+          label="Phone Canvass Name"
+          name="name"
+        ></TextField>
+        <GRFileInput
+          label="Contact List CSV"
+          description="CSV from GVote containing list of people to phone"
+          placeholder="Contact List CSV"
+          accept=".csv"
+          name="csv"
+        ></GRFileInput>
+        <input type="submit" />
+      </form>
+    </FormProvider>
+  );
+}
diff --git a/grassroots-frontend/src/routes/__root.tsx b/grassroots-frontend/src/routes/__root.tsx
index 821df21..39ba25e 100644
--- a/grassroots-frontend/src/routes/__root.tsx
+++ b/grassroots-frontend/src/routes/__root.tsx
@@ -31,7 +31,7 @@ export const Route = createRootRouteWithContext<RouterContext>()({
             <RoutedLink to="/">Home</RoutedLink>
           </AppShell.Section>
           <AppShell.Section>
-            <RoutedLink to="/CreatePhoneCanvass">
+            <RoutedLink to="/PhoneCanvass/CreatePhoneCanvass">
               Create Phone Canvass
             </RoutedLink>
           </AppShell.Section>
diff --git a/grassroots-frontend/src/util/ReadFileAsText.ts b/grassroots-frontend/src/util/ReadFileAsText.ts
new file mode 100644
index 0000000..aa121ac
--- /dev/null
+++ b/grassroots-frontend/src/util/ReadFileAsText.ts
@@ -0,0 +1,19 @@
+export function readFileAsText(file: File): Promise<string> {
+  return new Promise((resolve, reject) => {
+    const reader = new FileReader();
+
+    reader.onload = (): void => {
+      if (typeof reader.result === "string") {
+        resolve(reader.result);
+      } else {
+        reject(new Error("Unexpected result type"));
+      }
+    };
+
+    reader.onerror = (): void => {
+      reject(reader.error ?? new Error("Unable to read file " + file.name));
+    };
+
+    reader.readAsText(file);
+  });
+}
diff --git a/grassroots-frontend/src/vite-env.d.ts b/grassroots-frontend/src/vite-env.d.ts
index afc9181..1149aa9 100644
--- a/grassroots-frontend/src/vite-env.d.ts
+++ b/grassroots-frontend/src/vite-env.d.ts
@@ -6,6 +6,7 @@ interface ViteTypeOptions {
 
 interface ImportMetaEnv {
   readonly VITE_BACKEND_HOST: string;
+  readonly VITE_FRONTEND_HOST: string;
 }
 
 interface ImportMeta {
diff --git a/grassroots-shared/src/dtos/Contact.dto.ts b/grassroots-shared/src/dtos/Contact.dto.ts
index 406d98e..42e3347 100644
--- a/grassroots-shared/src/dtos/Contact.dto.ts
+++ b/grassroots-shared/src/dtos/Contact.dto.ts
@@ -6,6 +6,7 @@ import {
   IsNotEmpty,
   IsOptional,
   IsPhoneNumber,
+  IsString,
   Min,
   ValidateNested,
 } from "class-validator";
@@ -52,6 +53,9 @@ export class CreateContactRequestDTO extends createDTOBase(
   @IsNotEmpty()
   firstName!: string;
 
+  @IsString()
+  middleName!: string;
+
   @IsNotEmpty()
   lastName!: string;
 
diff --git a/grassroots-shared/src/metadata.ts b/grassroots-shared/src/metadata.ts
deleted file mode 100644
index 050b0e1..0000000
--- a/grassroots-shared/src/metadata.ts
+++ /dev/null
@@ -1,290 +0,0 @@
-/* eslint-disable */
-export default async () => {
-  const t = {
-    ["./dtos/Organization.dto.js"]: await import("./dtos/Organization.dto.js"),
-    ["./dtos/Contact.dto.js"]: await import("./dtos/Contact.dto.js"),
-    ["./dtos/Paginated.dto.js"]: await import("./dtos/Paginated.dto.js"),
-    ["./dtos/Role.dto.js"]: await import("./dtos/Role.dto.js"),
-    ["./dtos/UserRole.dto.js"]: await import("./dtos/UserRole.dto.js"),
-    ["./dtos/User.dto.js"]: await import("./dtos/User.dto.js"),
-    ["./dtos/PhoneCanvass/PhoneCanvass.dto.js"]: await import(
-      "./dtos/PhoneCanvass/PhoneCanvass.dto.js"
-    ),
-  };
-  return {
-    "@nestjs/swagger": {
-      models: [
-        [
-          import("./dtos/Paginated.dto.js"),
-          {
-            PaginatedRequestDTO: {
-              rowsToSkip: { required: true, type: () => Number, minimum: 0 },
-              rowsToTake: { required: true, type: () => Number, minimum: 1 },
-            },
-            PaginatedResponseDTO: {
-              rowsSkipped: { required: true, type: () => Number, minimum: 0 },
-              rowsTotal: { required: true, type: () => Number, minimum: 0 },
-            },
-          },
-        ],
-        [
-          import("./dtos/Organization.dto.js"),
-          {
-            OrganizationDTO: {
-              id: { required: true, type: () => Number, minimum: 1 },
-              name: { required: true, type: () => String },
-              abbreviatedName: { required: true, type: () => String },
-              description: { required: true, type: () => String },
-              parentId: { required: false, type: () => Number, minimum: 1 },
-            },
-            OrganizationsDTO: {
-              organizations: {
-                required: true,
-                type: () => [t["./dtos/Organization.dto.js"].OrganizationDTO],
-              },
-            },
-            OrganizationReferenceDTO: {
-              id: { required: true, type: () => Number, minimum: 1 },
-            },
-            CreateOrganizationNoParentRequestDTO: {
-              name: { required: true, type: () => String },
-              abbreviatedName: { required: true, type: () => String },
-              description: { required: true, type: () => String },
-            },
-            CreateOrganizationRequestDTO: {
-              name: { required: true, type: () => String },
-              abbreviatedName: { required: true, type: () => String },
-              description: { required: true, type: () => String },
-              parentID: { required: true, type: () => Number, minimum: 1 },
-            },
-          },
-        ],
-        [
-          import("./dtos/Contact.dto.js"),
-          {
-            ContactDTO: {
-              id: { required: true, type: () => Number, minimum: 1 },
-              email: { required: true, type: () => String, format: "email" },
-              firstName: { required: true, type: () => String },
-              lastName: { required: true, type: () => String },
-              organization: {
-                required: true,
-                type: () => t["./dtos/Organization.dto.js"].OrganizationDTO,
-              },
-              phoneNumber: { required: true, type: () => String },
-            },
-            ContactsDTO: {
-              contacts: {
-                required: true,
-                type: () => [t["./dtos/Contact.dto.js"].ContactDTO],
-              },
-            },
-            CreateContactRequestDTO: {
-              email: { required: true, type: () => String, format: "email" },
-              firstName: { required: true, type: () => String },
-              lastName: { required: true, type: () => String },
-              phoneNumber: { required: true, type: () => String },
-              organizationId: {
-                required: true,
-                type: () => Number,
-                minimum: -1,
-              },
-            },
-            CreateBulkContactRequestDTO: {
-              contacts: {
-                required: true,
-                type: () => [
-                  t["./dtos/Contact.dto.js"].CreateContactRequestDTO,
-                ],
-              },
-            },
-            CreateBulkContactResponseDTO: {
-              ids: { required: true, type: () => [Number] },
-            },
-            GetContactByIDResponseDTO: {
-              contact: {
-                required: true,
-                type: () => t["./dtos/Contact.dto.js"].ContactDTO,
-                nullable: true,
-              },
-            },
-            ContactSearchRequestDTO: {
-              id: { required: false, type: () => Number, minimum: 1 },
-              email: { required: false, type: () => String },
-              firstName: { required: false, type: () => String },
-              lastName: { required: false, type: () => String },
-              organizationId: { required: false, type: () => Number },
-              phoneNumber: { required: false, type: () => String },
-            },
-            PaginatedContactSearchRequestDTO: {
-              contact: {
-                required: true,
-                type: () => t["./dtos/Contact.dto.js"].ContactSearchRequestDTO,
-              },
-              paginated: {
-                required: true,
-                type: () => t["./dtos/Paginated.dto.js"].PaginatedRequestDTO,
-              },
-            },
-            PaginatedContactResponseDTO: {
-              contacts: {
-                required: true,
-                type: () => [t["./dtos/Contact.dto.js"].ContactDTO],
-              },
-              paginated: {
-                required: true,
-                type: () => t["./dtos/Paginated.dto.js"].PaginatedResponseDTO,
-              },
-            },
-          },
-        ],
-        [
-          import("./dtos/Hello.dto.js"),
-          { HelloOutDTO: { message: { required: true, type: () => String } } },
-        ],
-        [
-          import("./dtos/Permission.dto.js"),
-          {
-            PermissionsDTO: {
-              permissions: { required: true, type: () => [Object] },
-            },
-          },
-        ],
-        [
-          import("./dtos/Role.dto.js"),
-          {
-            RoleDTO: {
-              id: { required: true, type: () => Number, minimum: 1 },
-              name: { required: true, type: () => String },
-              permissions: { required: true, type: () => [Object] },
-            },
-            RolesDTO: {
-              roles: {
-                required: true,
-                type: () => [t["./dtos/Role.dto.js"].RoleDTO],
-              },
-            },
-          },
-        ],
-        [
-          import("./dtos/UserRole.dto.js"),
-          {
-            UserRoleDTO: {
-              id: { required: false, type: () => Number, minimum: 1 },
-              userId: { required: false, type: () => String },
-              role: {
-                required: true,
-                type: () => t["./dtos/Role.dto.js"].RoleDTO,
-              },
-              organizationId: {
-                required: true,
-                type: () => Number,
-                minimum: 1,
-              },
-              inherited: { required: true, type: () => Boolean },
-            },
-          },
-        ],
-        [
-          import("./dtos/User.dto.js"),
-          {
-            UserDTO: {
-              id: { required: true, type: () => String },
-              emails: {
-                required: false,
-                type: () => [String],
-                format: "email",
-              },
-              firstName: { required: false, type: () => String },
-              lastName: { required: false, type: () => String },
-              displayName: { required: false, type: () => String },
-              userRoles: {
-                required: false,
-                type: () => [t["./dtos/UserRole.dto.js"].UserRoleDTO],
-              },
-            },
-            UserPermissionsForOrgRequestDTO: {
-              userId: { required: true, type: () => String },
-              organizationId: {
-                required: true,
-                type: () => Number,
-                minimum: 1,
-              },
-            },
-            UsersDTO: {
-              users: {
-                required: true,
-                type: () => [t["./dtos/User.dto.js"].UserDTO],
-              },
-            },
-          },
-        ],
-        [
-          import("./dtos/LoginState.dto.js"),
-          {
-            LoginStateDTO: {
-              user: {
-                required: false,
-                type: () => t["./dtos/User.dto.js"].UserDTO,
-              },
-            },
-          },
-        ],
-        [
-          import("./dtos/ValidationError.dto.js"),
-          {
-            ValidationErrorOutDTO: {
-              statusCode: { required: true, type: () => Number },
-              message: { required: true, type: () => [String] },
-              error: { required: true, type: () => String },
-            },
-          },
-        ],
-        [import("./dtos/Void.dto.js"), { VoidDTO: {} }],
-        [
-          import("./dtos/PhoneCanvass/PhoneCanvass.dto.js"),
-          {
-            PhoneCanvassDTO: {
-              id: { required: true, type: () => String },
-              contacts: {
-                required: true,
-                type: () => [
-                  t["./dtos/PhoneCanvass/PhoneCanvass.dto.js"]
-                    .PhoneCanvassContactDTO,
-                ],
-              },
-            },
-            CreatePhoneCanvasContactRequestDTO: {
-              contact: {
-                required: true,
-                type: () => t["./dtos/Contact.dto.js"].CreateContactRequestDTO,
-              },
-              metadata: { required: true, type: () => String, format: "json" },
-            },
-            CreatePhoneCanvassRequestDTO: {
-              contacts: {
-                required: true,
-                type: () => [
-                  t["./dtos/PhoneCanvass/PhoneCanvass.dto.js"]
-                    .CreatePhoneCanvasContactRequestDTO,
-                ],
-              },
-            },
-            CreatePhoneCanvassResponseDTO: {
-              id: { required: true, type: () => String },
-            },
-            PhoneCanvassContactDTO: {
-              contact: {
-                required: true,
-                type: () => t["./dtos/Contact.dto.js"].ContactDTO,
-              },
-              metadata: { required: true, type: () => String, format: "json" },
-              callStatus: { required: true, type: () => Object },
-            },
-          },
-        ],
-      ],
-      controllers: [],
-    },
-  };
-};
-- 
2.43.0

