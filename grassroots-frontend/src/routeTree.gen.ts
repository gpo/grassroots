/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SearchImport } from './routes/Search'
import { Route as IndexImport } from './routes/Index'
import { Route as CreateContactImport } from './routes/CreateContact'

// Create/Update Routes

const SearchRoute = SearchImport.update({
  id: '/Search',
  path: '/Search',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/Index',
  path: '/Index',
  getParentRoute: () => rootRoute,
} as any)

const CreateContactRoute = CreateContactImport.update({
  id: '/CreateContact',
  path: '/CreateContact',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/CreateContact': {
      id: '/CreateContact'
      path: '/CreateContact'
      fullPath: '/CreateContact'
      preLoaderRoute: typeof CreateContactImport
      parentRoute: typeof rootRoute
    }
    '/Index': {
      id: '/Index'
      path: '/Index'
      fullPath: '/Index'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/Search': {
      id: '/Search'
      path: '/Search'
      fullPath: '/Search'
      preLoaderRoute: typeof SearchImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/CreateContact': typeof CreateContactRoute
  '/Index': typeof IndexRoute
  '/Search': typeof SearchRoute
}

export interface FileRoutesByTo {
  '/CreateContact': typeof CreateContactRoute
  '/Index': typeof IndexRoute
  '/Search': typeof SearchRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/CreateContact': typeof CreateContactRoute
  '/Index': typeof IndexRoute
  '/Search': typeof SearchRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/CreateContact' | '/Index' | '/Search'
  fileRoutesByTo: FileRoutesByTo
  to: '/CreateContact' | '/Index' | '/Search'
  id: '__root__' | '/CreateContact' | '/Index' | '/Search'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  CreateContactRoute: typeof CreateContactRoute
  IndexRoute: typeof IndexRoute
  SearchRoute: typeof SearchRoute
}

const rootRouteChildren: RootRouteChildren = {
  CreateContactRoute: CreateContactRoute,
  IndexRoute: IndexRoute,
  SearchRoute: SearchRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/CreateContact",
        "/Index",
        "/Search"
      ]
    },
    "/CreateContact": {
      "filePath": "CreateContact.tsx"
    },
    "/Index": {
      "filePath": "Index.tsx"
    },
    "/Search": {
      "filePath": "Search.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
