/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './Routes/__root'
import { Route as IndexRouteImport } from './Routes/index'
import { Route as UsersIndexRouteImport } from './Routes/Users/index'
import { Route as OrganizationsIndexRouteImport } from './Routes/Organizations/index'
import { Route as PhoneCanvassCreateRouteImport } from './Routes/PhoneCanvass/Create'
import { Route as PhoneCanvassPhoneCanvassIdRouteImport } from './Routes/PhoneCanvass/$phoneCanvassId'
import { Route as OrganizationsOrganizationIdRouteImport } from './Routes/Organizations/$organizationId'
import { Route as ContactsSharedSearchRouteImport } from './Routes/Contacts/SharedSearch'
import { Route as ContactsSearchRouteImport } from './Routes/Contacts/Search'
import { Route as ContactsCreateRouteImport } from './Routes/Contacts/Create'
import { Route as PhoneCanvassManagePhoneCanvassIdRouteImport } from './Routes/PhoneCanvass/Manage.$phoneCanvassId'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersIndexRoute = UsersIndexRouteImport.update({
  id: '/Users/',
  path: '/Users/',
  getParentRoute: () => rootRouteImport,
} as any)
const OrganizationsIndexRoute = OrganizationsIndexRouteImport.update({
  id: '/Organizations/',
  path: '/Organizations/',
  getParentRoute: () => rootRouteImport,
} as any)
const PhoneCanvassCreateRoute = PhoneCanvassCreateRouteImport.update({
  id: '/PhoneCanvass/Create',
  path: '/PhoneCanvass/Create',
  getParentRoute: () => rootRouteImport,
} as any)
const PhoneCanvassPhoneCanvassIdRoute =
  PhoneCanvassPhoneCanvassIdRouteImport.update({
    id: '/PhoneCanvass/$phoneCanvassId',
    path: '/PhoneCanvass/$phoneCanvassId',
    getParentRoute: () => rootRouteImport,
  } as any)
const OrganizationsOrganizationIdRoute =
  OrganizationsOrganizationIdRouteImport.update({
    id: '/Organizations/$organizationId',
    path: '/Organizations/$organizationId',
    getParentRoute: () => rootRouteImport,
  } as any)
const ContactsSharedSearchRoute = ContactsSharedSearchRouteImport.update({
  id: '/Contacts/SharedSearch',
  path: '/Contacts/SharedSearch',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactsSearchRoute = ContactsSearchRouteImport.update({
  id: '/Contacts/Search',
  path: '/Contacts/Search',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactsCreateRoute = ContactsCreateRouteImport.update({
  id: '/Contacts/Create',
  path: '/Contacts/Create',
  getParentRoute: () => rootRouteImport,
} as any)
const PhoneCanvassManagePhoneCanvassIdRoute =
  PhoneCanvassManagePhoneCanvassIdRouteImport.update({
    id: '/PhoneCanvass/Manage/$phoneCanvassId',
    path: '/PhoneCanvass/Manage/$phoneCanvassId',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/Contacts/Create': typeof ContactsCreateRoute
  '/Contacts/Search': typeof ContactsSearchRoute
  '/Contacts/SharedSearch': typeof ContactsSharedSearchRoute
  '/Organizations/$organizationId': typeof OrganizationsOrganizationIdRoute
  '/PhoneCanvass/$phoneCanvassId': typeof PhoneCanvassPhoneCanvassIdRoute
  '/PhoneCanvass/Create': typeof PhoneCanvassCreateRoute
  '/Organizations': typeof OrganizationsIndexRoute
  '/Users': typeof UsersIndexRoute
  '/PhoneCanvass/Manage/$phoneCanvassId': typeof PhoneCanvassManagePhoneCanvassIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/Contacts/Create': typeof ContactsCreateRoute
  '/Contacts/Search': typeof ContactsSearchRoute
  '/Contacts/SharedSearch': typeof ContactsSharedSearchRoute
  '/Organizations/$organizationId': typeof OrganizationsOrganizationIdRoute
  '/PhoneCanvass/$phoneCanvassId': typeof PhoneCanvassPhoneCanvassIdRoute
  '/PhoneCanvass/Create': typeof PhoneCanvassCreateRoute
  '/Organizations': typeof OrganizationsIndexRoute
  '/Users': typeof UsersIndexRoute
  '/PhoneCanvass/Manage/$phoneCanvassId': typeof PhoneCanvassManagePhoneCanvassIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/Contacts/Create': typeof ContactsCreateRoute
  '/Contacts/Search': typeof ContactsSearchRoute
  '/Contacts/SharedSearch': typeof ContactsSharedSearchRoute
  '/Organizations/$organizationId': typeof OrganizationsOrganizationIdRoute
  '/PhoneCanvass/$phoneCanvassId': typeof PhoneCanvassPhoneCanvassIdRoute
  '/PhoneCanvass/Create': typeof PhoneCanvassCreateRoute
  '/Organizations/': typeof OrganizationsIndexRoute
  '/Users/': typeof UsersIndexRoute
  '/PhoneCanvass/Manage/$phoneCanvassId': typeof PhoneCanvassManagePhoneCanvassIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/Contacts/Create'
    | '/Contacts/Search'
    | '/Contacts/SharedSearch'
    | '/Organizations/$organizationId'
    | '/PhoneCanvass/$phoneCanvassId'
    | '/PhoneCanvass/Create'
    | '/Organizations'
    | '/Users'
    | '/PhoneCanvass/Manage/$phoneCanvassId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/Contacts/Create'
    | '/Contacts/Search'
    | '/Contacts/SharedSearch'
    | '/Organizations/$organizationId'
    | '/PhoneCanvass/$phoneCanvassId'
    | '/PhoneCanvass/Create'
    | '/Organizations'
    | '/Users'
    | '/PhoneCanvass/Manage/$phoneCanvassId'
  id:
    | '__root__'
    | '/'
    | '/Contacts/Create'
    | '/Contacts/Search'
    | '/Contacts/SharedSearch'
    | '/Organizations/$organizationId'
    | '/PhoneCanvass/$phoneCanvassId'
    | '/PhoneCanvass/Create'
    | '/Organizations/'
    | '/Users/'
    | '/PhoneCanvass/Manage/$phoneCanvassId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ContactsCreateRoute: typeof ContactsCreateRoute
  ContactsSearchRoute: typeof ContactsSearchRoute
  ContactsSharedSearchRoute: typeof ContactsSharedSearchRoute
  OrganizationsOrganizationIdRoute: typeof OrganizationsOrganizationIdRoute
  PhoneCanvassPhoneCanvassIdRoute: typeof PhoneCanvassPhoneCanvassIdRoute
  PhoneCanvassCreateRoute: typeof PhoneCanvassCreateRoute
  OrganizationsIndexRoute: typeof OrganizationsIndexRoute
  UsersIndexRoute: typeof UsersIndexRoute
  PhoneCanvassManagePhoneCanvassIdRoute: typeof PhoneCanvassManagePhoneCanvassIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Users/': {
      id: '/Users/'
      path: '/Users'
      fullPath: '/Users'
      preLoaderRoute: typeof UsersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Organizations/': {
      id: '/Organizations/'
      path: '/Organizations'
      fullPath: '/Organizations'
      preLoaderRoute: typeof OrganizationsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/PhoneCanvass/Create': {
      id: '/PhoneCanvass/Create'
      path: '/PhoneCanvass/Create'
      fullPath: '/PhoneCanvass/Create'
      preLoaderRoute: typeof PhoneCanvassCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/PhoneCanvass/$phoneCanvassId': {
      id: '/PhoneCanvass/$phoneCanvassId'
      path: '/PhoneCanvass/$phoneCanvassId'
      fullPath: '/PhoneCanvass/$phoneCanvassId'
      preLoaderRoute: typeof PhoneCanvassPhoneCanvassIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Organizations/$organizationId': {
      id: '/Organizations/$organizationId'
      path: '/Organizations/$organizationId'
      fullPath: '/Organizations/$organizationId'
      preLoaderRoute: typeof OrganizationsOrganizationIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Contacts/SharedSearch': {
      id: '/Contacts/SharedSearch'
      path: '/Contacts/SharedSearch'
      fullPath: '/Contacts/SharedSearch'
      preLoaderRoute: typeof ContactsSharedSearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Contacts/Search': {
      id: '/Contacts/Search'
      path: '/Contacts/Search'
      fullPath: '/Contacts/Search'
      preLoaderRoute: typeof ContactsSearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Contacts/Create': {
      id: '/Contacts/Create'
      path: '/Contacts/Create'
      fullPath: '/Contacts/Create'
      preLoaderRoute: typeof ContactsCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/PhoneCanvass/Manage/$phoneCanvassId': {
      id: '/PhoneCanvass/Manage/$phoneCanvassId'
      path: '/PhoneCanvass/Manage/$phoneCanvassId'
      fullPath: '/PhoneCanvass/Manage/$phoneCanvassId'
      preLoaderRoute: typeof PhoneCanvassManagePhoneCanvassIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ContactsCreateRoute: ContactsCreateRoute,
  ContactsSearchRoute: ContactsSearchRoute,
  ContactsSharedSearchRoute: ContactsSharedSearchRoute,
  OrganizationsOrganizationIdRoute: OrganizationsOrganizationIdRoute,
  PhoneCanvassPhoneCanvassIdRoute: PhoneCanvassPhoneCanvassIdRoute,
  PhoneCanvassCreateRoute: PhoneCanvassCreateRoute,
  OrganizationsIndexRoute: OrganizationsIndexRoute,
  UsersIndexRoute: UsersIndexRoute,
  PhoneCanvassManagePhoneCanvassIdRoute: PhoneCanvassManagePhoneCanvassIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
