/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UsersRouteImport } from './routes/Users'
import { Route as SharedSearchRouteImport } from './routes/SharedSearch'
import { Route as SearchRouteImport } from './routes/Search'
import { Route as CreateContactRouteImport } from './routes/CreateContact'
import { Route as IndexRouteImport } from './routes/index'

const UsersRoute = UsersRouteImport.update({
  id: '/Users',
  path: '/Users',
  getParentRoute: () => rootRouteImport,
} as any)
const SharedSearchRoute = SharedSearchRouteImport.update({
  id: '/SharedSearch',
  path: '/SharedSearch',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchRoute = SearchRouteImport.update({
  id: '/Search',
  path: '/Search',
  getParentRoute: () => rootRouteImport,
} as any)
const CreateContactRoute = CreateContactRouteImport.update({
  id: '/CreateContact',
  path: '/CreateContact',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/CreateContact': typeof CreateContactRoute
  '/Search': typeof SearchRoute
  '/SharedSearch': typeof SharedSearchRoute
  '/Users': typeof UsersRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/CreateContact': typeof CreateContactRoute
  '/Search': typeof SearchRoute
  '/SharedSearch': typeof SharedSearchRoute
  '/Users': typeof UsersRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/CreateContact': typeof CreateContactRoute
  '/Search': typeof SearchRoute
  '/SharedSearch': typeof SharedSearchRoute
  '/Users': typeof UsersRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/CreateContact' | '/Search' | '/SharedSearch' | '/Users'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/CreateContact' | '/Search' | '/SharedSearch' | '/Users'
  id:
    | '__root__'
    | '/'
    | '/CreateContact'
    | '/Search'
    | '/SharedSearch'
    | '/Users'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CreateContactRoute: typeof CreateContactRoute
  SearchRoute: typeof SearchRoute
  SharedSearchRoute: typeof SharedSearchRoute
  UsersRoute: typeof UsersRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/Users': {
      id: '/Users'
      path: '/Users'
      fullPath: '/Users'
      preLoaderRoute: typeof UsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/SharedSearch': {
      id: '/SharedSearch'
      path: '/SharedSearch'
      fullPath: '/SharedSearch'
      preLoaderRoute: typeof SharedSearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Search': {
      id: '/Search'
      path: '/Search'
      fullPath: '/Search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/CreateContact': {
      id: '/CreateContact'
      path: '/CreateContact'
      fullPath: '/CreateContact'
      preLoaderRoute: typeof CreateContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CreateContactRoute: CreateContactRoute,
  SearchRoute: SearchRoute,
  SharedSearchRoute: SharedSearchRoute,
  UsersRoute: UsersRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
