/* eslint-disable */
export default async () => {
    const t = {
        ["../src/Organization.dto\", { with: { \"resolution-mode\": \"import"]: await import("../src/Organization.dto", { with: { "resolution-mode": "import" } }),
        ["../src/Contact.dto\", { with: { \"resolution-mode\": \"import"]: await import("../src/Contact.dto", { with: { "resolution-mode": "import" } }),
        ["../src/Paginated.dto\", { with: { \"resolution-mode\": \"import"]: await import("../src/Paginated.dto", { with: { "resolution-mode": "import" } }),
        ["../src/Role.dto\", { with: { \"resolution-mode\": \"import"]: await import("../src/Role.dto", { with: { "resolution-mode": "import" } }),
        ["../src/UserRole.dto\", { with: { \"resolution-mode\": \"import"]: await import("../src/UserRole.dto", { with: { "resolution-mode": "import" } }),
        ["../src/User.dto\", { with: { \"resolution-mode\": \"import"]: await import("../src/User.dto", { with: { "resolution-mode": "import" } })
    };
    return { "@nestjs/swagger": { "models": [[import("../src/Paginated.dto"), { "PaginatedRequestDTO": { rowsToSkip: { required: true, type: () => Number, minimum: 0 }, rowsToTake: { required: true, type: () => Number, minimum: 1 } }, "PaginatedResponseDTO": { rowsSkipped: { required: true, type: () => Number, minimum: 0 }, rowsTotal: { required: true, type: () => Number, minimum: 0 } } }], [import("../src/Organization.dto"), { "OrganizationDTO": { id: { required: true, type: () => Number, minimum: 1 }, name: { required: true, type: () => String }, parentId: { required: false, type: () => Number, minimum: 1 } }, "OrganizationsDTO": { organizations: { required: true, type: () => [t["../src/Organization.dto", { with: { "resolution-mode": "import"].OrganizationDTO] } }, "OrganizationReferenceDTO": { id: { required: true, type: () => Number, minimum: 1 } }, "CreateOrganizationNoParentRequestDTO": { name: { required: true, type: () => String } }, "CreateOrganizationRequestDTO": { name: { required: true, type: () => String }, parentID: { required: true, type: () => Number, minimum: 1 } } }], [import("../src/Contact.dto"), { "ContactDTO": { id: { required: true, type: () => Number, minimum: 1 }, email: { required: true, type: () => String, format: "email" }, firstName: { required: true, type: () => String }, lastName: { required: true, type: () => String }, organization: { required: true, type: () => t["../src/Organization.dto", { with: { "resolution-mode": "import"].OrganizationDTO }, organizationId: { required: true, type: () => Number, minimum: 1 }, phoneNumber: { required: true, type: () => String } }, "ContactsDTO": { contacts: { required: true, type: () => [t["../src/Contact.dto", { with: { "resolution-mode": "import"].ContactDTO] } }, "CreateContactRequestDTO": { email: { required: true, type: () => String, format: "email" }, firstName: { required: true, type: () => String }, lastName: { required: true, type: () => String }, phoneNumber: { required: true, type: () => String }, organizationId: { required: true, type: () => Number, minimum: -1 } }, "CreateBulkContactRequestDTO": { contacts: { required: true, type: () => [t["../src/Contact.dto", { with: { "resolution-mode": "import"].CreateContactRequestDTO] } }, "CreateBulkContactResponseDTO": { ids: { required: true, type: () => [Number] } }, "GetContactByIDResponseDTO": { contact: { required: true, type: () => t["../src/Contact.dto", { with: { "resolution-mode": "import"].ContactDTO, nullable: true } }, "ContactSearchRequestDTO": { id: { required: false, type: () => Number, minimum: 1 }, email: { required: false, type: () => String }, firstName: { required: false, type: () => String }, lastName: { required: false, type: () => String }, phoneNumber: { required: false, type: () => String } }, "PaginatedContactSearchRequestDTO": { contact: { required: true, type: () => t["../src/Contact.dto", { with: { "resolution-mode": "import"].ContactSearchRequestDTO }, paginated: { required: true, type: () => t["../src/Paginated.dto", { with: { "resolution-mode": "import"].PaginatedRequestDTO } }, "PaginatedContactResponseDTO": { contacts: { required: true, type: () => [t["../src/Contact.dto", { with: { "resolution-mode": "import"].ContactDTO] }, paginated: { required: true, type: () => t["../src/Paginated.dto", { with: { "resolution-mode": "import"].PaginatedResponseDTO } } }], [import("../src/Hello.dto"), { "HelloOutDTO": { message: { required: true, type: () => String } } }], [import("../src/Permission.dto"), { "PermissionsDTO": { permissions: { required: true, type: () => [Object] } } }], [import("../src/Role.dto"), { "RoleDTO": { id: { required: true, type: () => Number, minimum: 1 }, name: { required: true, type: () => String }, permissions: { required: true, type: () => [Object] } }, "RolesDTO": { roles: { required: true, type: () => [t["../src/Role.dto", { with: { "resolution-mode": "import"].RoleDTO] } } }], [import("../src/UserRole.dto"), { "UserRoleDTO": { id: { required: false, type: () => Number, minimum: 1 }, userId: { required: false, type: () => String }, role: { required: true, type: () => t["../src/Role.dto", { with: { "resolution-mode": "import"].RoleDTO }, organizationId: { required: true, type: () => Number, minimum: 1 }, inherited: { required: true, type: () => Boolean } } }], [import("../src/User.dto"), { "UserDTO": { id: { required: true, type: () => String }, emails: { required: false, type: () => [String], format: "email" }, firstName: { required: false, type: () => String }, lastName: { required: false, type: () => String }, displayName: { required: false, type: () => String }, userRoles: { required: false, type: () => [t["../src/UserRole.dto", { with: { "resolution-mode": "import"].UserRoleDTO] } }, "UserPermissionsForOrgRequestDTO": { userId: { required: true, type: () => String }, organizationId: { required: true, type: () => Number, minimum: 1 } }, "UsersDTO": { users: { required: true, type: () => [t["../src/User.dto", { with: { "resolution-mode": "import"].UserDTO] } } }], [import("../src/LoginState.dto"), { "LoginStateDTO": { user: { required: false, type: () => t["../src/User.dto", { with: { "resolution-mode": "import"].UserDTO } } }], [import("../src/ValidationError.dto"), { "ValidationErrorOutDTO": { statusCode: { required: true, type: () => Number }, message: { required: true, type: () => [String] }, error: { required: true, type: () => String } } }], [import("../src/Void.dto"), { "VoidDTO": {} }]], "controllers": [] } };
};